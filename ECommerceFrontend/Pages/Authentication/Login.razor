@page "/authentication/login"
@inject ProtectedLocalStorage  _protectedLocalStorage
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager
@inject ToastService _toastService
@attribute [AllowAnonymous]

<div class="card-body">
    <p class="login-box-msg">Login to continue shopping</p>
    <EditForm Model="@user" OnValidSubmit="@ValidateUser">
        <DataAnnotationsValidator />

        <div class="form-group  mb-3">
            <div class="input-group">
                <InputText @bind-Value="user.Email" class="form-control" placeholder="Email" />
                <div class="input-group-append">
                    <div class="input-group-text">
                        <span class="fas fa-envelope"></span>
                    </div>
                </div>
            </div>
            <ValidationMessage For="@(() => user.Email)" />
        </div>

        <div class="form-group mb-3">
            <div class="input-group">
                <InputText @bind-Value="user.Password" class="form-control" placeholder="Password" type="password" />
                <div class="input-group-append">
                    <div class="input-group-text">
                        <span class="fas fa-lock"></span>
                    </div>
                </div>
            </div>
            <ValidationMessage For="@(() => user.Password)" />
        </div>


        <div class="row">
            <div class="col-8">
                <div class="icheck-primary">
                    <InputCheckbox @bind-Value="user.RememberMe" type="checkbox" id="remember" />
                    <label for="remember">
                        Remember Me
                    </label>
                </div>
            </div>
            <!-- /.col -->
            <div class="col-4">
                <button type="submit" class="btn btn-primary btn-block @(loading == true ? "disabled" : "")">
                    @if (loading)
                    {
                        <i class="fas fa-spinner fa-spin"></i>
                    }
                    else
                    {
                        <span>Login</span>
                    }
                </button>
            </div>
            <!-- /.col -->
        </div>
    </EditForm>

    <hr />
    <div class="social-auth-links text-center mt-2 mb-3">
        <a href="/authentication/signup">
            <b>Create an account</b>
        </a><br/>
        <div class="mb-2"></div>
        <a href="/authentication/forgotpassword">
            I forgot my password
        </a>
    </div>
</div>
<!-- /.card-body -->

@code {
    private bool loading = false;
    private UserSignIn user = new();

    protected override async Task OnInitializedAsync()
    {
        var email = await _protectedLocalStorage.GetAsync<string>(StorageConstants.StoredEmail);
        if (email.Success)
        {
            user.Email = email.Value;
            user.RememberMe = true;
        }

        var password = await _protectedLocalStorage.GetAsync<string>(StorageConstants.StoredPassword);
        if (password.Success)
            user.Password = password.Value;
    }

    private async Task ValidateUser()
    {
        string returnUrl = "/";
        var uriBuilder = new UriBuilder(_navigationManager.Uri);
        var q = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
        string qReturnUrl = q["returnUrl"];
        if (!string.IsNullOrEmpty(qReturnUrl))
        {
            returnUrl = qReturnUrl;
        }

        loading = true;

        AuthenticationResult authenticationResult = await ((CustomAuthonticationStateProvider)_authenticationStateProvider).ValidateUser(user.Email, user.Password, user.RememberMe);

        if (authenticationResult.Success)
        {
            _navigationManager.NavigateTo(returnUrl);
            await _toastService.ShowToastAsync($"Welcome {authenticationResult.CurrentUser.FirstName}", ToastType.Info);
        }
        else
        {
            await _toastService.ShowToastAsync(authenticationResult.Message, ToastType.Error);
        }

        loading = false;
    }
}


